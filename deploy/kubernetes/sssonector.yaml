---
# ConfigMap for SSSonector configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sssonector-config
  namespace: sssonector
data:
  config.json: |
    {
      "mode": "server",
      "network": {
        "interface": "eth0",
        "mtu": 1500,
        "dnsServers": ["8.8.8.8", "8.8.4.4"]
      },
      "monitor": {
        "enabled": true,
        "interval": "60s",
        "prometheus": {
          "enabled": true,
          "port": 9090,
          "path": "/metrics"
        },
        "snmp": {
          "enabled": true,
          "port": 161
        }
      }
    }

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sssonector
  namespace: sssonector

---
# Role for SSSonector
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sssonector
  namespace: sssonector
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sssonector
  namespace: sssonector
subjects:
- kind: ServiceAccount
  name: sssonector
  namespace: sssonector
roleRef:
  kind: Role
  name: sssonector
  apiGroup: rbac.authorization.k8s.io

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sssonector
  namespace: sssonector
  labels:
    app: sssonector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sssonector
  template:
    metadata:
      labels:
        app: sssonector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sssonector
      containers:
      - name: sssonector
        image: sssonector:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "NET_RAW"]
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 161
          name: snmp
          protocol: UDP
        volumeMounts:
        - name: config
          mountPath: /etc/sssonector
        - name: data
          mountPath: /var/lib/sssonector
        livenessProbe:
          exec:
            command:
            - sssonectorctl
            - health
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - sssonectorctl
            - status
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
      volumes:
      - name: config
        configMap:
          name: sssonector-config
      - name: data
        persistentVolumeClaim:
          claimName: sssonector-data

---
# Service for metrics
apiVersion: v1
kind: Service
metadata:
  name: sssonector-metrics
  namespace: sssonector
  labels:
    app: sssonector
spec:
  ports:
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: sssonector

---
# Service for SNMP
apiVersion: v1
kind: Service
metadata:
  name: sssonector-snmp
  namespace: sssonector
  labels:
    app: sssonector
spec:
  ports:
  - port: 161
    targetPort: snmp
    protocol: UDP
    name: snmp
  selector:
    app: sssonector

---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sssonector-data
  namespace: sssonector
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# ServiceMonitor for Prometheus Operator
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sssonector
  namespace: sssonector
  labels:
    app: sssonector
spec:
  selector:
    matchLabels:
      app: sssonector
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sssonector
  namespace: sssonector
spec:
  podSelector:
    matchLabels:
      app: sssonector
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - ports:
    - port: 9090
      protocol: TCP
    - port: 161
      protocol: UDP
  egress:
  - {}
