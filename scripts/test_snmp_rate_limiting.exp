#!/usr/bin/expect

set timeout 300
set monitor_host "192.168.50.212"
set server_host "192.168.50.210"
set client_host "192.168.50.211"
set test_file "/home/test/data/DryFire_v4_10.zip"

# Log file setup
log_file -a "snmp_rate_limit_results.log"
send_log "\n=== Starting Rate Limiting Tests with SNMP Monitoring ===\n"
send_log "[exec date]\n"

# SNMP OIDs
set throughput_oid ".1.3.6.1.4.1.8072.1.3.2.3.1.2.19.115.115.115.111.110.101.99.116.111.114.45.116.104.114.111.117.103.104.112.117.116.1.0"
set connections_oid ".1.3.6.1.4.1.8072.1.3.2.3.1.2.21.115.115.115.111.110.101.99.116.111.114.45.99.111.110.110.101.99.116.105.111.110.115.1.0"
set latency_oid ".1.3.6.1.4.1.8072.1.3.2.3.1.2.17.115.115.115.111.110.101.99.116.111.114.45.108.97.116.101.110.99.121.1.0"

# Test rate limits (in Mbps)
set rate_limits {5 25 50 75 100}

proc collect_metrics {duration} {
    global monitor_host throughput_oid connections_oid latency_oid
    set metrics {}
    
    for {set i 0} {$i < $duration} {incr i} {
        spawn snmpget -v2c -c public $monitor_host $throughput_oid $connections_oid $latency_oid
        expect {
            -re {(\d+:\d+).*?(\d+).*?(\d+\.\d+)} {
                lappend metrics [list $expect_out(1,string) $expect_out(2,string) $expect_out(3,string)]
                send_log "."
            }
            timeout {
                send_log "T"
            }
        }
        sleep 1
    }
    send_log "\n"
    return $metrics
}

proc test_rate_limit {direction rate_limit} {
    global server_host client_host test_file timeout
    send_log "\n=== Testing $direction transfer at $rate_limit Mbps ===\n"
    
    # Set rate limit on server
    spawn ssh test@$server_host
    expect "password:"
    send "test\r"
    expect "$ "
    send "sudo sssonector --set-rate-limit $rate_limit\r"
    expect "password:"
    send "test\r"
    expect "$ "
    send "exit\r"
    expect eof
    
    # Start file transfer
    if {$direction eq "server-to-client"} {
        spawn ssh test@$client_host "nc $server_host 12345 > /dev/null"
    } else {
        spawn ssh test@$server_host "nc -l 12345 > /dev/null"
        expect "$ "
        spawn ssh test@$client_host "cat $test_file | nc $server_host 12345"
    }
    
    # Collect metrics during transfer
    set metrics [collect_metrics 60]
    
    # Calculate statistics
    set total_throughput 0
    set total_connections 0
    set total_latency 0
    set samples [llength $metrics]
    
    foreach metric $metrics {
        lassign $metric throughput connections latency
        lassign [split $throughput ":"] rx tx
        set total_throughput [expr {$total_throughput + ($tx - $rx)}]
        set total_connections [expr {$total_connections + $connections}]
        set total_latency [expr {$total_latency + $latency}]
    }
    
    set avg_throughput [expr {$total_throughput / $samples / 1024 / 1024 * 8}] ;# Convert to Mbps
    set avg_connections [expr {$total_connections / $samples}]
    set avg_latency [expr {$total_latency / $samples}]
    
    # Log results
    send_log "\nResults for $rate_limit Mbps $direction:\n"
    send_log "Average throughput: $avg_throughput Mbps\n"
    send_log "Average connections: $avg_connections\n"
    send_log "Average latency: $avg_latency ms\n"
    
    # Verify results within 5% margin
    set min_acceptable [expr {$rate_limit * 0.95}]
    set max_acceptable [expr {$rate_limit * 1.05}]
    
    if {$avg_throughput >= $min_acceptable && $avg_throughput <= $max_acceptable} {
        send_log "✓ Rate limiting test PASSED\n"
        return 1
    } else {
        send_log "✗ Rate limiting test FAILED (outside 5% margin)\n"
        return 0
    }
}

# Run tests in both directions
set test_results {}
foreach direction {"server-to-client" "client-to-server"} {
    foreach rate $rate_limits {
        dict set test_results $direction $rate [test_rate_limit $direction $rate]
    }
}

# Generate summary
send_log "\n=== Test Summary ===\n"
set total_tests 0
set passed_tests 0

dict for {direction rates} $test_results {
    dict for {rate result} $rates {
        incr total_tests
        if {$result} {
            incr passed_tests
        }
        send_log "[expr {$result ? "✓" : "✗"}] $direction at $rate Mbps: [expr {$result ? "PASS" : "FAIL"}]\n"
    }
}

send_log "\nPassed $passed_tests out of $total_tests tests\n"
send_log "Test completion time: [exec date]\n"

# Exit with appropriate status
if {$passed_tests == $total_tests} {
    exit 0
} else {
    exit 1
}
