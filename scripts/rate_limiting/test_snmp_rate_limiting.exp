#!/usr/bin/expect

set timeout 300
set monitor_host "192.168.50.212"
set server_host "192.168.50.210"
set client_host "192.168.50.211"
set test_file "/home/sblanken/DryFire_v4_10.zip"

# Log file setup
log_file -a "test/test_logs/rate_limit_test.log"
send_log "\n=== Starting Rate Limiting Tests ===\n"
send_log "[exec date]\n"

# Test rate limits (in Mbps)
set rate_limits {5 10 25 50}

proc collect_metrics {duration} {
    global monitor_host
    set metrics {}
    
    for {set i 0} {$i < $duration} {incr i} {
        # Get throughput
        spawn ssh sblanken@$monitor_host "/usr/local/bin/sssonector-snmp throughput"
        expect {
            -re {(\d+):(\d+)} {
                set rx $expect_out(1,string)
                set tx $expect_out(2,string)
                lappend metrics [list $rx $tx]
                send_log "."
            }
            timeout {
                send_log "T"
            }
        }
        expect eof
        sleep 1
    }
    send_log "\n"
    return $metrics
}

proc test_rate_limit {direction rate_limit} {
    global server_host client_host test_file
    send_log "\n=== Testing $direction transfer at $rate_limit Mbps ===\n"

    # Set rate limit on server
    spawn ssh sblanken@$server_host
    expect "$ "
    send "sudo sssonector --set-rate-limit $rate_limit\r"
    expect {
        "password for sblanken:" {
            send "101abn\r"
            exp_continue
        }
        "$ " {
            send "exit\r"
        }
    }
    expect eof

    # Start file transfer
    if {$direction eq "server-to-client"} {
        send_log "Starting server-to-client transfer...\n"
        spawn ssh sblanken@$client_host
        expect "$ "
        send "sftp sblanken@$server_host:$test_file /tmp/test_download\r"
    } else {
        send_log "Starting client-to-server transfer...\n"
        spawn ssh sblanken@$client_host
        expect "$ "
        send "sftp $test_file sblanken@$server_host:/tmp/test_upload\r"
    }

    # Collect metrics during transfer
    send_log "Collecting metrics...\n"
    set metrics [collect_metrics 30]
    
    # Calculate average throughput
    set total_rx 0
    set total_tx 0
    set samples [llength $metrics]
    
    foreach metric $metrics {
        lassign $metric rx tx
        set total_rx [expr {$total_rx + $rx}]
        set total_tx [expr {$total_tx + $tx}]
    }
    
    set avg_rx [expr {$total_rx / $samples / 1024 / 1024 * 8.0}] ;# Convert to Mbps
    set avg_tx [expr {$total_tx / $samples / 1024 / 1024 * 8.0}] ;# Convert to Mbps
    
    send_log "\nAverage RX: $avg_rx Mbps\n"
    send_log "Average TX: $avg_tx Mbps\n"

    # Clean up
    spawn ssh sblanken@$client_host
    expect "$ "
    send "rm -f /tmp/test_*\r"
    expect "$ "
    send "exit\r"
    expect eof

    spawn ssh sblanken@$server_host
    expect "$ "
    send "rm -f /tmp/test_*\r"
    expect "$ "
    send "exit\r"
    expect eof

    # Verify rate limit
    set measured_rate [expr {$direction eq "server-to-client" ? $avg_rx : $avg_tx}]
    set min_acceptable [expr {$rate_limit * 0.90}]
    set max_acceptable [expr {$rate_limit * 1.10}]
    
    if {$measured_rate >= $min_acceptable && $measured_rate <= $max_acceptable} {
        send_log "✓ Rate limiting test PASSED\n"
        return 1
    } else {
        send_log "✗ Rate limiting test FAILED (measured: $measured_rate Mbps, target: $rate_limit Mbps)\n"
        return 0
    }
}

# Run tests in both directions
set test_results {}
foreach direction {"server-to-client" "client-to-server"} {
    foreach rate $rate_limits {
        dict set test_results $direction $rate [test_rate_limit $direction $rate]
    }
}

# Generate summary
send_log "\n=== Test Summary ===\n"
set total_tests 0
set passed_tests 0

dict for {direction rates} $test_results {
    dict for {rate result} $rates {
        incr total_tests
        if {$result} {
            incr passed_tests
        }
        send_log "[expr {$result ? "✓" : "✗"}] $direction at $rate Mbps: [expr {$result ? "PASS" : "FAIL"}]\n"
    }
}

send_log "\nPassed $passed_tests out of $total_tests tests\n"
send_log "Test completion time: [exec date]\n"

# Exit with appropriate status
if {$passed_tests == $total_tests} {
    exit 0
} else {
    exit 1
}
