#!/usr/bin/expect

set timeout 300
set monitor_host "192.168.50.212"
set server_host "192.168.50.210"
set client_host "192.168.50.211"
set test_file "/home/sblanken/DryFire_v4_10.zip"

# Log file setup
log_file -a "test/test_logs/rate_limit_test.log"
send_log "\n=== Starting Rate Limiting Tests ===\n"
send_log "[exec date]\n"

# Test rate limits (in Mbps)
set rate_limits {5 10 25 50}

proc test_rate_limit {direction rate_limit} {
    global server_host client_host test_file
    send_log "\n=== Testing $direction transfer at $rate_limit Mbps ===\n"

    # Set rate limit on server
    spawn ssh sblanken@$server_host
    expect {
        "password:" {
            send "101abn\r"
            exp_continue
        }
        "$ " {
            send "sudo sssonector --set-rate-limit $rate_limit\r"
            exp_continue
        }
        "password for sblanken:" {
            send "101abn\r"
            exp_continue
        }
    }
    expect "$ "
    send "exit\r"
    expect eof

    # Start FTP transfer
    if {$direction eq "server-to-client"} {
        send_log "Starting server-to-client FTP transfer...\n"
        spawn ssh sblanken@$client_host
        expect "$ "
        send "ftp -n $server_host << EOF\n"
        send "user sblanken 101abn\n"
        send "binary\n"
        send "get $test_file /tmp/test_download\n"
        send "quit\n"
        send "EOF\n"
        expect "$ "
    } else {
        send_log "Starting client-to-server FTP transfer...\n"
        spawn ssh sblanken@$client_host
        expect "$ "
        send "ftp -n $server_host << EOF\n"
        send "user sblanken 101abn\n"
        send "binary\n"
        send "put $test_file /tmp/test_upload\n"
        send "quit\n"
        send "EOF\n"
        expect "$ "
    }

    # Wait for transfer to complete and clean up
    sleep 30
    send "rm -f /tmp/test_*\r"
    expect "$ "
    send "exit\r"
    expect eof

    # For now, return success (we'll add actual validation in the next iteration)
    return 1
}

# Run tests in both directions
set test_results {}
foreach direction {"server-to-client" "client-to-server"} {
    foreach rate $rate_limits {
        dict set test_results $direction $rate [test_rate_limit $direction $rate]
    }
}

# Generate summary
send_log "\n=== Test Summary ===\n"
set total_tests 0
set passed_tests 0

dict for {direction rates} $test_results {
    dict for {rate result} $rates {
        incr total_tests
        if {$result} {
            incr passed_tests
        }
        send_log "[expr {$result ? "✓" : "✗"}] $direction at $rate Mbps: [expr {$result ? "PASS" : "FAIL"}]\n"
    }
}

send_log "\nPassed $passed_tests out of $total_tests tests\n"
send_log "Test completion time: [exec date]\n"

# Exit with appropriate status
if {$passed_tests == $total_tests} {
    exit 0
} else {
    exit 1
}
